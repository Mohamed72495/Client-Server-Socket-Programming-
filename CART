import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;


public class MyCart extends javax.swing.JFrame {
    String str;
    ResultSet rs;
    Vector records;
    String query;
    int i=0;
    ObjectInputStream br = null;
    Socket clientSocket = null;
    ObjectOutputStream out =null;
    cartInfo cart;
    String itemName;
    String price;
    String amount;
    String total;
    String idsaved ;
    int totalPayment;
    int MyIndex;
    itemInfo itemTableInfo;
    int availableAmount;
 public MyCart() {
        initComponents();
        totalPayment = 0;
        records = new Vector();
          
                    
            try {
                 clientSocket = new Socket("localhost",1400); //connect to the server
                 query = "Select * from CART where USERNAME ='" + Market_Place.userNameSaved + "'";
        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            //out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
                br = new ObjectInputStream(clientSocket.getInputStream());
                records =(Vector)br.readObject();
                br.close();
                int i =0;
                  
                  
                   DefaultTableModel dt = (DefaultTableModel) CartTable.getModel();  
                   dt.setRowCount(0);
                  while(i < records.size())
                  {
                      cart = (cartInfo)records.elementAt(i);
                      Vector v = new Vector();
                      v.add(cart.id);
                      v.add(cart.itemName);
                      v.add(cart.price);
                      v.add(cart.amount);
                      v.add(cart.total);
                      totalPayment = totalPayment + Integer.valueOf(cart.total);                        
                      dt.addRow(v);                      
                      i++;                      
                  }
                 // Market_Place.id = Integer.valueOf(cart.id) + 1;
                  records.removeAllElements();
                  
                  
                    
            } catch (IOException ex) {
                Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
       private int mouseX,mouseY;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
  PurchaseBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        RemoveBtn = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        CartTable = new javax.swing.JTable();
     minus = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        amountLable = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
         jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });
  PurchaseBtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        PurchaseBtn.setForeground(new java.awt.Color(51, 51, 51));
        PurchaseBtn.setText("Purchase items");
    PurchaseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseBtnMouseClicked(evt);
            }
        });
        

        PurchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                  PurchaseBtnjButton5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 24)); // NOI18N
        jLabel1.setText("CART");
        RemoveBtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        RemoveBtn.setForeground(new java.awt.Color(51, 51, 51));
        RemoveBtn.setText("Remove from cart");
        RemoveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            
        jPanel4.setBackground(new java.awt.Color(0, 51, 204));

        jLabel80.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 255, 255));
        jLabel80.setText("👥 ACCOUNT");
        jLabel80.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel80jLabel70MouseClicked(evt);
            }
        });

        jLabel81.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(255, 255, 255));
        jLabel81.setText("🛒 CART");
        jLabel81.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel81jLabel71MouseClicked(evt);
            }
        });

        jLabel82.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(255, 255, 255));
        jLabel82.setText("🔌 ITEMS");
        jLabel82.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel82jLabel71MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel80)
                    .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel80)
                .addGap(64, 64, 64)
                .addComponent(jLabel82)
                .addGap(78, 78, 78)
                .addComponent(jLabel81)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PurchaseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseBtnMouseClicked
     if(Integer.valueOf(Market_Place.cashSave) >= totalPayment){      
         Market_Place.cashSave = String.valueOf(Integer.valueOf(Market_Place.cashSave) - totalPayment);
        DefaultTableModel model=(DefaultTableModel)CartTable.getModel();
        model.setRowCount(0);
        query = "INSERT INTO HISTORY SELECT * FROM CART WHERE USERNAME='" + Market_Place.userNameSaved + "'";
        try {
            clientSocket = new Socket("localhost",1400);
             try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (IOException ex) {
            Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
        }        
        query = "DELETE FROM CART WHERE USERNAME='" + Market_Place.userNameSaved + "'";
         try {
             clientSocket = new Socket("localhost",1400);
         } catch (IOException ex) {
             Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
         }
        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
             JOptionPane.showMessageDialog(this, "Order is purchased");
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        query = "Update  ACCOUNTS set CASH=" + Market_Place.cashSave + "where USERNAME='"+Market_Place.userNameSaved+"'";
         try {
             clientSocket = new Socket("localhost",1400);
         } catch (IOException ex) {
             Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
         }
        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
            totalPayment=0;
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        } 
        else{
          JOptionPane.showMessageDialog(this, "Cash isn't enough");

         }
     
    }//GEN-LAST:event_PurchaseBtnMouseClicked
                RemoveBtnMouseClicked(evt);
            }
        });
         RemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBtnjButton5ActionPerformed(evt);
            }
        });
        CartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "id", "ItemName", "Price", "Amount", "Total"
            }
        ));
        CartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(CartTable);



        minus.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        minus.setText("-");
        minus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minusMouseClicked(evt);
            }
        });
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        plus.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N
        plus.setText("+");
        plus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plusMouseClicked(evt);
            }
        });
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        amountLable.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        amountLable.setText("0");

        jLabel5.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        jLabel5.setText("🖊 EDIT️ AMOUNT");

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel4.setText("X");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Emoji", 1, 27)); // NOI18N
        jLabel6.setText("🛒 ");
         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(PurchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(plus)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(amountLable, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13))
                                    .addComponent(RemoveBtn))
                                .addContainerGap(20, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plus, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(amountLable, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(minus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PurchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        
        jPanel4.setBackground(new java.awt.Color(0, 51, 204));

        jLabel80.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 255, 255));
        jLabel80.setText("👥 ACCOUNT");
        jLabel80.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel80jLabel70MouseClicked(evt);
            }
        });

        jLabel81.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(255, 255, 255));
        jLabel81.setText("🛒 CART");
        jLabel81.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel81jLabel71MouseClicked(evt);
            }
        });

        jLabel82.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(255, 255, 255));
        jLabel82.setText("🔌 ITEMS");
        jLabel82.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel82jLabel71MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel80)
                    .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel80)
                .addGap(64, 64, 64)
                .addComponent(jLabel82)
                .addGap(78, 78, 78)
                .addComponent(jLabel81)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PurchaseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseBtnMouseClicked
     if(Integer.valueOf(Market_Place.cashSave) >= totalPayment){      
         Market_Place.cashSave = String.valueOf(Integer.valueOf(Market_Place.cashSave) - totalPayment);
        DefaultTableModel model=(DefaultTableModel)CartTable.getModel();
        model.setRowCount(0);
        query = "INSERT INTO HISTORY SELECT * FROM CART WHERE USERNAME='" + Market_Place.userNameSaved + "'";
        try {
            clientSocket = new Socket("localhost",1400);
             try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (IOException ex) {
            Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
        }        
        query = "DELETE FROM CART WHERE USERNAME='" + Market_Place.userNameSaved + "'";
         try {
             clientSocket = new Socket("localhost",1400);
         } catch (IOException ex) {
             Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
         }
        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
             JOptionPane.showMessageDialog(this, "Order is purchased");
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        query = "Update  ACCOUNTS set CASH=" + Market_Place.cashSave + "where USERNAME='"+Market_Place.userNameSaved+"'";
         try {
             clientSocket = new Socket("localhost",1400);
         } catch (IOException ex) {
             Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
         }
        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
            totalPayment=0;
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        } 
        else{
          JOptionPane.showMessageDialog(this, "Cash isn't enough");

         }
     
    }//GEN-LAST:event_PurchaseBtnMouseClicked




  private void PurchaseBtnjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseBtnjButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchaseBtnjButton5ActionPerformed

    private void RemoveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemoveBtnMouseClicked
        DefaultTableModel model=(DefaultTableModel)CartTable.getModel();
        model.removeRow(MyIndex);
        query = "Delete from CART where USERNAME='" + Market_Place.userNameSaved + "'"+"AND ID=" + idsaved ;
        try {
            clientSocket = new Socket("localhost",1400);
             try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (IOException ex) {
            Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
        }        
        query = "Update ITEMS set QUANTITY = QUANTITY +"+ amount + "Where NAME='" + itemName+"'";
         try {
            clientSocket = new Socket("localhost",1400);
             try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (IOException ex) {
            Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_RemoveBtnMouseClicked

    private void RemoveBtnjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBtnjButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemoveBtnjButton5ActionPerformed

    private void CartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartTableMouseClicked
        DefaultTableModel model=(DefaultTableModel)CartTable.getModel();
        MyIndex=CartTable.getSelectedRow();
        itemName = model.getValueAt(MyIndex, 1).toString();
        price = model.getValueAt(MyIndex, 2).toString();
        amount = model.getValueAt(MyIndex, 3).toString();
        total = model.getValueAt(MyIndex, 4).toString(); 
         idsaved = model.getValueAt(MyIndex, 0).toString(); 
        amountLable.setText(amount);
    }//GEN-LAST:event_CartTableMouseClicked

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minusActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plusActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
      this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        this.setLocation(this.getX() + evt.getX() - mouseX,this.getY() + evt.getY() - mouseY);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:
        mouseX = evt.getX();
        mouseY = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jLabel80jLabel70MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel80jLabel70MouseClicked
        new Accounts().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel80jLabel70MouseClicked

    private void jLabel81jLabel71MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel81jLabel71MouseClicked
        //        new MyCart().setVisible(true);
        // this.dispose();
    }//GEN-LAST:event_jLabel81jLabel71MouseClicked

    private void jLabel82jLabel71MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel82jLabel71MouseClicked
        new Items().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel82jLabel71MouseClicked

    private void plusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plusMouseClicked
         records = new Vector();
         try {
                 clientSocket = new Socket("localhost",1400);
                 query = "Select * from ITEMS where NAME ='" + itemName + "'";
        try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            //out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
                br = new ObjectInputStream(clientSocket.getInputStream());
                records =(Vector)br.readObject();
                br.close();
                int i =0;
            while(i < records.size())
                  {
                      itemTableInfo = (itemInfo)records.elementAt(i);
                      availableAmount = Integer.valueOf(itemTableInfo.quantity);                    
                      i++;                      
                  }
                  records.removeAllElements();
                          
            } catch (IOException ex) {
                Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
            if( availableAmount<1 ) {
                  JOptionPane.showMessageDialog(this, "Not Enough Quantity");
            }
            else{
                amount = String.valueOf(Integer.valueOf(amount)+1);
                amountLable.setText(amount);
                
                DefaultTableModel model=(DefaultTableModel)CartTable.getModel();
                model.setValueAt(amount,MyIndex,3);
                total = String.valueOf(Integer.valueOf(total)+Integer.valueOf(price));
                model.setValueAt(total,MyIndex,4);
               query = "UPDATE CART SET AMOUNT= AMOUNT + 1 , TOTALPRICE =TOTALPRICE +"+price+"WHERE USERNAME='" + Market_Place.userNameSaved + "' AND ID=" + idsaved;
                 try {
                     clientSocket = new Socket("localhost",1400);
                 } catch (IOException ex) {
                     Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
                 }

                try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
                query = "update ITEMS set QUANTITY = QUANTITY - 1 WHERE NAME ='"+itemName+"'";
                 try {
                     clientSocket = new Socket("localhost",1400);
                 } catch (IOException ex) {
                     Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
                 }
                try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
            }
            
    }//GEN-LAST:event_plusMouseClicked

    private void minusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minusMouseClicked
            if( Integer.valueOf(amount)<=1) {
                JOptionPane.showMessageDialog(this, "Cannot be decreamented,you can remove it from your card");
            }
            else{
                amount = String.valueOf(Integer.valueOf(amount)-1);
                amountLable.setText(amount);
                DefaultTableModel model=(DefaultTableModel)CartTable.getModel();
                model.setValueAt(amount,MyIndex,3);
                total = String.valueOf(Integer.valueOf(total)-Integer.valueOf(price));
                model.setValueAt(total,MyIndex,4);
                query = "UPDATE CART SET AMOUNT= AMOUNT - 1 , TOTALPRICE =TOTALPRICE -"+price+"WHERE USERNAME='" + Market_Place.userNameSaved + "' AND ID=" + idsaved;
            try {
                     clientSocket = new Socket("localhost",1400);
                 } catch (IOException ex) {
                     Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
                 }

                try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
                query = "update ITEMS set QUANTITY = QUANTITY + 1 WHERE NAME ='"+itemName+"'";
                 try {
                     clientSocket = new Socket("localhost",1400);
                 } catch (IOException ex) {
                     Logger.getLogger(MyCart.class.getName()).log(Level.SEVERE, null, ex);
                 }
                try {
            out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.writeObject(query);
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Accounts.class.getName()).log(Level.SEVERE, null, ex);
        }
            }
            
    }//GEN-LAST:event_minusMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
           //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
MyCart a = new MyCart();
                a.pack();
                a.setLocationRelativeTo(null);
                a.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CartTable;
    private javax.swing.JButton PurchaseBtn;
    private javax.swing.JButton RemoveBtn;
    private javax.swing.JLabel amountLable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton minus;
    private javax.swing.JButton plus;
    // End of variables declaration//GEN-END:variables 
}
